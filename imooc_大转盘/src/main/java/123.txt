SurfaceView extends view  不需要重写ondraw方法
其实view是在UI线程中绘制

surfaceview在子线程中绘制，避免造成UI线程阻塞.
surfaceView中包含一个专门用于绘制的Surface，Surface中包含一个Canvas。

getholder-->surfaceholder
surfaceholder-->再拿到Canvas+管理surfaceview的生命周期

==================================
drawBitmap(Bitmap bitmap, Rect src, RectF dst, Paint paint)；
Rect src: 是对图片进行裁截，若是空null则显示整个图片
RectF dst：是图片在Canvas画布中显示的区域，
           大于src则把src的裁截区放大，
           小于src则把src的裁截区缩小。

           ===========================================

           private void drawText(float tempAngle, float sweepAngle, String mstr) {
                   Path path = new Path();
                   /**
                    *http://blog.csdn.net/w124374860/article/details/44995057
                    * addArc(RectF oval, float startAngle, float sweepAngle)方法：

                    path.addArc方法用于绘制圆弧，这个圆弧取自RectF矩形的内接椭圆上的一部分，圆弧长度由后两个参数决定

                    startAngle：起始位置的角度值

                    sweepAngle：旋转的角度值
                    */
                   path.addArc(mRectF, tempAngle, sweepAngle);
                   /**
                    * //Offset参数指定水平偏移、vOffset指定垂直偏移 http://www.xuebuyuan.com/2071680.html
                    * 水平偏移量=（区块弧度一半）---（文字长度的一半）
                    */

                   int textwideh = (int) mTextPaint.measureText(mstr);//Return the width of the text.
                   int hoffset = (int) (mRadius * Math.PI / mItemCount / 2 - textwideh / 2);

                   int vOffset = mRadius / 12;
                   canvas.drawTextOnPath(mstr, path, hoffset, vOffset, mTextPaint);
               }



/**===========================
                     * oval :指定圆弧的外轮廓矩形区域()。
                     startAngle: 圆弧起始角度，单位为度。
                     sweepAngle: 圆弧扫过的角度，顺时针方向，单位为度。
                     useCenter: 如果为True时，在绘制圆弧时将圆心包括在内，通常用来绘制扇形。
                     paint: 绘制圆弧的画板属性，如颜色，是否填充等。
                     */
                    canvas.drawArc(mRectF, tempAngle, sweepAngle, true, mArcPaint);
